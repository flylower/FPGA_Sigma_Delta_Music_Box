// -------------------------------------------------------------
//
// Module: filter
// Generated by MATLAB(R) 8.6 and the Filter Design HDL Coder 2.10.
// Generated on: 2017-03-08 12:20:57
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// OptimizeForHDL: on
// TargetDirectory: hdlsrc12
// AddPipelineRegisters: on
// ResetAssertedLevel: Active-low
// TargetLanguage: Verilog
// MultifileTestBench: on
// TestBenchStimulus: impulse step ramp chirp noise 
// ClockHighTime: 25
// ClockLowTime: 25

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Multipliers           : 55
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 107
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s16,0 -> [-32768 32768)
// Filter Internals  : Specify Precision
//   Output          : s16,0 -> [-32768 32768)
//   Product         : s31,15 -> [-32768 32768)
//   Accumulator     : s32,15 -> [-65536 65536)
//   Round Mode      : convergent
//   Overflow Mode   : wrap
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module filter
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16
  output  signed [15:0] filter_out; //sfix16

////////////////////////////////////////////////////////////////
//Module Architecture: filter
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000000000010; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b1111111111111000; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0000000000001100; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b1111111111101111; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b0000000000011000; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b1111111111011111; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b0000000000101100; //sfix16_En15
  parameter signed [15:0] coeff18 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff19 = 16'b1111111111000110; //sfix16_En15
  parameter signed [15:0] coeff20 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff21 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff22 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff23 = 16'b1111111110100000; //sfix16_En15
  parameter signed [15:0] coeff24 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff25 = 16'b0000000001111001; //sfix16_En15
  parameter signed [15:0] coeff26 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff27 = 16'b1111111101101000; //sfix16_En15
  parameter signed [15:0] coeff28 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff29 = 16'b0000000010111101; //sfix16_En15
  parameter signed [15:0] coeff30 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff31 = 16'b1111111100010111; //sfix16_En15
  parameter signed [15:0] coeff32 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff33 = 16'b0000000100011111; //sfix16_En15
  parameter signed [15:0] coeff34 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff35 = 16'b1111111010100001; //sfix16_En15
  parameter signed [15:0] coeff36 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff37 = 16'b0000000110101110; //sfix16_En15
  parameter signed [15:0] coeff38 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff39 = 16'b1111110111110000; //sfix16_En15
  parameter signed [15:0] coeff40 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff41 = 16'b0000001010001101; //sfix16_En15
  parameter signed [15:0] coeff42 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff43 = 16'b1111110011001110; //sfix16_En15
  parameter signed [15:0] coeff44 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff45 = 16'b0000010000011010; //sfix16_En15
  parameter signed [15:0] coeff46 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff47 = 16'b1111101010000100; //sfix16_En15
  parameter signed [15:0] coeff48 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff49 = 16'b0000011111101000; //sfix16_En15
  parameter signed [15:0] coeff50 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff51 = 16'b1111001010010001; //sfix16_En15
  parameter signed [15:0] coeff52 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff53 = 16'b0010100010110010; //sfix16_En15
  parameter signed [15:0] coeff54 = 16'b0100000000000000; //sfix16_En15
  parameter signed [15:0] coeff55 = 16'b0010100010110010; //sfix16_En15
  parameter signed [15:0] coeff56 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff57 = 16'b1111001010010001; //sfix16_En15
  parameter signed [15:0] coeff58 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff59 = 16'b0000011111101000; //sfix16_En15
  parameter signed [15:0] coeff60 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff61 = 16'b1111101010000100; //sfix16_En15
  parameter signed [15:0] coeff62 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff63 = 16'b0000010000011010; //sfix16_En15
  parameter signed [15:0] coeff64 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff65 = 16'b1111110011001110; //sfix16_En15
  parameter signed [15:0] coeff66 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff67 = 16'b0000001010001101; //sfix16_En15
  parameter signed [15:0] coeff68 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff69 = 16'b1111110111110000; //sfix16_En15
  parameter signed [15:0] coeff70 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff71 = 16'b0000000110101110; //sfix16_En15
  parameter signed [15:0] coeff72 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff73 = 16'b1111111010100001; //sfix16_En15
  parameter signed [15:0] coeff74 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff75 = 16'b0000000100011111; //sfix16_En15
  parameter signed [15:0] coeff76 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff77 = 16'b1111111100010111; //sfix16_En15
  parameter signed [15:0] coeff78 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff79 = 16'b0000000010111101; //sfix16_En15
  parameter signed [15:0] coeff80 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff81 = 16'b1111111101101000; //sfix16_En15
  parameter signed [15:0] coeff82 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff83 = 16'b0000000001111001; //sfix16_En15
  parameter signed [15:0] coeff84 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff85 = 16'b1111111110100000; //sfix16_En15
  parameter signed [15:0] coeff86 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff87 = 16'b0000000001001011; //sfix16_En15
  parameter signed [15:0] coeff88 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff89 = 16'b1111111111000110; //sfix16_En15
  parameter signed [15:0] coeff90 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff91 = 16'b0000000000101100; //sfix16_En15
  parameter signed [15:0] coeff92 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff93 = 16'b1111111111011111; //sfix16_En15
  parameter signed [15:0] coeff94 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff95 = 16'b0000000000011000; //sfix16_En15
  parameter signed [15:0] coeff96 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff97 = 16'b1111111111101111; //sfix16_En15
  parameter signed [15:0] coeff98 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff99 = 16'b0000000000001100; //sfix16_En15
  parameter signed [15:0] coeff100 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff101 = 16'b1111111111111000; //sfix16_En15
  parameter signed [15:0] coeff102 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff103 = 16'b0000000000000101; //sfix16_En15
  parameter signed [15:0] coeff104 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff105 = 16'b1111111111111101; //sfix16_En15
  parameter signed [15:0] coeff106 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff107 = 16'b0000000000000010; //sfix16_En15

  // Signals
  reg  signed [15:0] delay_pipeline [0:106] ; // sfix16
  wire signed [30:0] product107; // sfix31_En15
  wire signed [30:0] product105; // sfix31_En15
  wire signed [31:0] mul_temp; // sfix32_En15
  wire signed [30:0] product103; // sfix31_En15
  wire signed [31:0] mul_temp_1; // sfix32_En15
  wire signed [30:0] product101; // sfix31_En15
  wire signed [16:0] mulpwr2_temp; // sfix17
  wire signed [30:0] product99; // sfix31_En15
  wire signed [31:0] mul_temp_2; // sfix32_En15
  wire signed [30:0] product97; // sfix31_En15
  wire signed [31:0] mul_temp_3; // sfix32_En15
  wire signed [30:0] product95; // sfix31_En15
  wire signed [31:0] mul_temp_4; // sfix32_En15
  wire signed [30:0] product93; // sfix31_En15
  wire signed [31:0] mul_temp_5; // sfix32_En15
  wire signed [30:0] product91; // sfix31_En15
  wire signed [31:0] mul_temp_6; // sfix32_En15
  wire signed [30:0] product89; // sfix31_En15
  wire signed [31:0] mul_temp_7; // sfix32_En15
  wire signed [30:0] product87; // sfix31_En15
  wire signed [31:0] mul_temp_8; // sfix32_En15
  wire signed [30:0] product85; // sfix31_En15
  wire signed [31:0] mul_temp_9; // sfix32_En15
  wire signed [30:0] product83; // sfix31_En15
  wire signed [31:0] mul_temp_10; // sfix32_En15
  wire signed [30:0] product81; // sfix31_En15
  wire signed [31:0] mul_temp_11; // sfix32_En15
  wire signed [30:0] product79; // sfix31_En15
  wire signed [31:0] mul_temp_12; // sfix32_En15
  wire signed [30:0] product77; // sfix31_En15
  wire signed [31:0] mul_temp_13; // sfix32_En15
  wire signed [30:0] product75; // sfix31_En15
  wire signed [31:0] mul_temp_14; // sfix32_En15
  wire signed [30:0] product73; // sfix31_En15
  wire signed [31:0] mul_temp_15; // sfix32_En15
  wire signed [30:0] product71; // sfix31_En15
  wire signed [31:0] mul_temp_16; // sfix32_En15
  wire signed [30:0] product69; // sfix31_En15
  wire signed [31:0] mul_temp_17; // sfix32_En15
  wire signed [30:0] product67; // sfix31_En15
  wire signed [31:0] mul_temp_18; // sfix32_En15
  wire signed [30:0] product65; // sfix31_En15
  wire signed [31:0] mul_temp_19; // sfix32_En15
  wire signed [30:0] product63; // sfix31_En15
  wire signed [31:0] mul_temp_20; // sfix32_En15
  wire signed [30:0] product61; // sfix31_En15
  wire signed [31:0] mul_temp_21; // sfix32_En15
  wire signed [30:0] product59; // sfix31_En15
  wire signed [31:0] mul_temp_22; // sfix32_En15
  wire signed [30:0] product57; // sfix31_En15
  wire signed [31:0] mul_temp_23; // sfix32_En15
  wire signed [30:0] product55; // sfix31_En15
  wire signed [31:0] mul_temp_24; // sfix32_En15
  wire signed [30:0] product54; // sfix31_En15
  wire signed [30:0] product53; // sfix31_En15
  wire signed [31:0] mul_temp_25; // sfix32_En15
  wire signed [30:0] product51; // sfix31_En15
  wire signed [31:0] mul_temp_26; // sfix32_En15
  wire signed [30:0] product49; // sfix31_En15
  wire signed [31:0] mul_temp_27; // sfix32_En15
  wire signed [30:0] product47; // sfix31_En15
  wire signed [31:0] mul_temp_28; // sfix32_En15
  wire signed [30:0] product45; // sfix31_En15
  wire signed [31:0] mul_temp_29; // sfix32_En15
  wire signed [30:0] product43; // sfix31_En15
  wire signed [31:0] mul_temp_30; // sfix32_En15
  wire signed [30:0] product41; // sfix31_En15
  wire signed [31:0] mul_temp_31; // sfix32_En15
  wire signed [30:0] product39; // sfix31_En15
  wire signed [31:0] mul_temp_32; // sfix32_En15
  wire signed [30:0] product37; // sfix31_En15
  wire signed [31:0] mul_temp_33; // sfix32_En15
  wire signed [30:0] product35; // sfix31_En15
  wire signed [31:0] mul_temp_34; // sfix32_En15
  wire signed [30:0] product33; // sfix31_En15
  wire signed [31:0] mul_temp_35; // sfix32_En15
  wire signed [30:0] product31; // sfix31_En15
  wire signed [31:0] mul_temp_36; // sfix32_En15
  wire signed [30:0] product29; // sfix31_En15
  wire signed [31:0] mul_temp_37; // sfix32_En15
  wire signed [30:0] product27; // sfix31_En15
  wire signed [31:0] mul_temp_38; // sfix32_En15
  wire signed [30:0] product25; // sfix31_En15
  wire signed [31:0] mul_temp_39; // sfix32_En15
  wire signed [30:0] product23; // sfix31_En15
  wire signed [31:0] mul_temp_40; // sfix32_En15
  wire signed [30:0] product21; // sfix31_En15
  wire signed [31:0] mul_temp_41; // sfix32_En15
  wire signed [30:0] product19; // sfix31_En15
  wire signed [31:0] mul_temp_42; // sfix32_En15
  wire signed [30:0] product17; // sfix31_En15
  wire signed [31:0] mul_temp_43; // sfix32_En15
  wire signed [30:0] product15; // sfix31_En15
  wire signed [31:0] mul_temp_44; // sfix32_En15
  wire signed [30:0] product13; // sfix31_En15
  wire signed [31:0] mul_temp_45; // sfix32_En15
  wire signed [30:0] product11; // sfix31_En15
  wire signed [31:0] mul_temp_46; // sfix32_En15
  wire signed [30:0] product9; // sfix31_En15
  wire signed [31:0] mul_temp_47; // sfix32_En15
  wire signed [30:0] product7; // sfix31_En15
  wire signed [16:0] mulpwr2_temp_1; // sfix17
  wire signed [30:0] product5; // sfix31_En15
  wire signed [31:0] mul_temp_48; // sfix32_En15
  wire signed [30:0] product3; // sfix31_En15
  wire signed [31:0] mul_temp_49; // sfix32_En15
  wire signed [30:0] product1; // sfix31_En15
  wire signed [31:0] sum_final; // sfix32_En15
  wire signed [31:0] sum1_1; // sfix32_En15
  wire signed [30:0] add_signext; // sfix31_En15
  wire signed [30:0] add_signext_1; // sfix31_En15
  reg  signed [31:0] sumpipe1_1; // sfix32_En15
  wire signed [31:0] sum1_2; // sfix32_En15
  wire signed [30:0] add_signext_2; // sfix31_En15
  wire signed [30:0] add_signext_3; // sfix31_En15
  reg  signed [31:0] sumpipe1_2; // sfix32_En15
  wire signed [31:0] sum1_3; // sfix32_En15
  wire signed [30:0] add_signext_4; // sfix31_En15
  wire signed [30:0] add_signext_5; // sfix31_En15
  reg  signed [31:0] sumpipe1_3; // sfix32_En15
  wire signed [31:0] sum1_4; // sfix32_En15
  wire signed [30:0] add_signext_6; // sfix31_En15
  wire signed [30:0] add_signext_7; // sfix31_En15
  reg  signed [31:0] sumpipe1_4; // sfix32_En15
  wire signed [31:0] sum1_5; // sfix32_En15
  wire signed [30:0] add_signext_8; // sfix31_En15
  wire signed [30:0] add_signext_9; // sfix31_En15
  reg  signed [31:0] sumpipe1_5; // sfix32_En15
  wire signed [31:0] sum1_6; // sfix32_En15
  wire signed [30:0] add_signext_10; // sfix31_En15
  wire signed [30:0] add_signext_11; // sfix31_En15
  reg  signed [31:0] sumpipe1_6; // sfix32_En15
  wire signed [31:0] sum1_7; // sfix32_En15
  wire signed [30:0] add_signext_12; // sfix31_En15
  wire signed [30:0] add_signext_13; // sfix31_En15
  reg  signed [31:0] sumpipe1_7; // sfix32_En15
  wire signed [31:0] sum1_8; // sfix32_En15
  wire signed [30:0] add_signext_14; // sfix31_En15
  wire signed [30:0] add_signext_15; // sfix31_En15
  reg  signed [31:0] sumpipe1_8; // sfix32_En15
  wire signed [31:0] sum1_9; // sfix32_En15
  wire signed [30:0] add_signext_16; // sfix31_En15
  wire signed [30:0] add_signext_17; // sfix31_En15
  reg  signed [31:0] sumpipe1_9; // sfix32_En15
  wire signed [31:0] sum1_10; // sfix32_En15
  wire signed [30:0] add_signext_18; // sfix31_En15
  wire signed [30:0] add_signext_19; // sfix31_En15
  reg  signed [31:0] sumpipe1_10; // sfix32_En15
  wire signed [31:0] sum1_11; // sfix32_En15
  wire signed [30:0] add_signext_20; // sfix31_En15
  wire signed [30:0] add_signext_21; // sfix31_En15
  reg  signed [31:0] sumpipe1_11; // sfix32_En15
  wire signed [31:0] sum1_12; // sfix32_En15
  wire signed [30:0] add_signext_22; // sfix31_En15
  wire signed [30:0] add_signext_23; // sfix31_En15
  reg  signed [31:0] sumpipe1_12; // sfix32_En15
  wire signed [31:0] sum1_13; // sfix32_En15
  wire signed [30:0] add_signext_24; // sfix31_En15
  wire signed [30:0] add_signext_25; // sfix31_En15
  reg  signed [31:0] sumpipe1_13; // sfix32_En15
  wire signed [31:0] sum1_14; // sfix32_En15
  wire signed [30:0] add_signext_26; // sfix31_En15
  wire signed [30:0] add_signext_27; // sfix31_En15
  reg  signed [31:0] sumpipe1_14; // sfix32_En15
  wire signed [31:0] sum1_15; // sfix32_En15
  wire signed [30:0] add_signext_28; // sfix31_En15
  wire signed [30:0] add_signext_29; // sfix31_En15
  reg  signed [31:0] sumpipe1_15; // sfix32_En15
  wire signed [31:0] sum1_16; // sfix32_En15
  wire signed [30:0] add_signext_30; // sfix31_En15
  wire signed [30:0] add_signext_31; // sfix31_En15
  reg  signed [31:0] sumpipe1_16; // sfix32_En15
  wire signed [31:0] sum1_17; // sfix32_En15
  wire signed [30:0] add_signext_32; // sfix31_En15
  wire signed [30:0] add_signext_33; // sfix31_En15
  reg  signed [31:0] sumpipe1_17; // sfix32_En15
  wire signed [31:0] sum1_18; // sfix32_En15
  wire signed [30:0] add_signext_34; // sfix31_En15
  wire signed [30:0] add_signext_35; // sfix31_En15
  reg  signed [31:0] sumpipe1_18; // sfix32_En15
  wire signed [31:0] sum1_19; // sfix32_En15
  wire signed [30:0] add_signext_36; // sfix31_En15
  wire signed [30:0] add_signext_37; // sfix31_En15
  reg  signed [31:0] sumpipe1_19; // sfix32_En15
  wire signed [31:0] sum1_20; // sfix32_En15
  wire signed [30:0] add_signext_38; // sfix31_En15
  wire signed [30:0] add_signext_39; // sfix31_En15
  reg  signed [31:0] sumpipe1_20; // sfix32_En15
  wire signed [31:0] sum1_21; // sfix32_En15
  wire signed [30:0] add_signext_40; // sfix31_En15
  wire signed [30:0] add_signext_41; // sfix31_En15
  reg  signed [31:0] sumpipe1_21; // sfix32_En15
  wire signed [31:0] sum1_22; // sfix32_En15
  wire signed [30:0] add_signext_42; // sfix31_En15
  wire signed [30:0] add_signext_43; // sfix31_En15
  reg  signed [31:0] sumpipe1_22; // sfix32_En15
  wire signed [31:0] sum1_23; // sfix32_En15
  wire signed [30:0] add_signext_44; // sfix31_En15
  wire signed [30:0] add_signext_45; // sfix31_En15
  reg  signed [31:0] sumpipe1_23; // sfix32_En15
  wire signed [31:0] sum1_24; // sfix32_En15
  wire signed [30:0] add_signext_46; // sfix31_En15
  wire signed [30:0] add_signext_47; // sfix31_En15
  reg  signed [31:0] sumpipe1_24; // sfix32_En15
  wire signed [31:0] sum1_25; // sfix32_En15
  wire signed [30:0] add_signext_48; // sfix31_En15
  wire signed [30:0] add_signext_49; // sfix31_En15
  reg  signed [31:0] sumpipe1_25; // sfix32_En15
  wire signed [31:0] sum1_26; // sfix32_En15
  wire signed [30:0] add_signext_50; // sfix31_En15
  wire signed [30:0] add_signext_51; // sfix31_En15
  reg  signed [31:0] sumpipe1_26; // sfix32_En15
  wire signed [31:0] sum1_27; // sfix32_En15
  wire signed [30:0] add_signext_52; // sfix31_En15
  wire signed [30:0] add_signext_53; // sfix31_En15
  reg  signed [31:0] sumpipe1_27; // sfix32_En15
  reg  signed [30:0] sumpipe1_28; // sfix31_En15
  wire signed [31:0] sum2_1; // sfix32_En15
  wire signed [31:0] add_signext_54; // sfix32_En15
  wire signed [31:0] add_signext_55; // sfix32_En15
  wire signed [32:0] add_temp; // sfix33_En15
  reg  signed [31:0] sumpipe2_1; // sfix32_En15
  wire signed [31:0] sum2_2; // sfix32_En15
  wire signed [31:0] add_signext_56; // sfix32_En15
  wire signed [31:0] add_signext_57; // sfix32_En15
  wire signed [32:0] add_temp_1; // sfix33_En15
  reg  signed [31:0] sumpipe2_2; // sfix32_En15
  wire signed [31:0] sum2_3; // sfix32_En15
  wire signed [31:0] add_signext_58; // sfix32_En15
  wire signed [31:0] add_signext_59; // sfix32_En15
  wire signed [32:0] add_temp_2; // sfix33_En15
  reg  signed [31:0] sumpipe2_3; // sfix32_En15
  wire signed [31:0] sum2_4; // sfix32_En15
  wire signed [31:0] add_signext_60; // sfix32_En15
  wire signed [31:0] add_signext_61; // sfix32_En15
  wire signed [32:0] add_temp_3; // sfix33_En15
  reg  signed [31:0] sumpipe2_4; // sfix32_En15
  wire signed [31:0] sum2_5; // sfix32_En15
  wire signed [31:0] add_signext_62; // sfix32_En15
  wire signed [31:0] add_signext_63; // sfix32_En15
  wire signed [32:0] add_temp_4; // sfix33_En15
  reg  signed [31:0] sumpipe2_5; // sfix32_En15
  wire signed [31:0] sum2_6; // sfix32_En15
  wire signed [31:0] add_signext_64; // sfix32_En15
  wire signed [31:0] add_signext_65; // sfix32_En15
  wire signed [32:0] add_temp_5; // sfix33_En15
  reg  signed [31:0] sumpipe2_6; // sfix32_En15
  wire signed [31:0] sum2_7; // sfix32_En15
  wire signed [31:0] add_signext_66; // sfix32_En15
  wire signed [31:0] add_signext_67; // sfix32_En15
  wire signed [32:0] add_temp_6; // sfix33_En15
  reg  signed [31:0] sumpipe2_7; // sfix32_En15
  wire signed [31:0] sum2_8; // sfix32_En15
  wire signed [31:0] add_signext_68; // sfix32_En15
  wire signed [31:0] add_signext_69; // sfix32_En15
  wire signed [32:0] add_temp_7; // sfix33_En15
  reg  signed [31:0] sumpipe2_8; // sfix32_En15
  wire signed [31:0] sum2_9; // sfix32_En15
  wire signed [31:0] add_signext_70; // sfix32_En15
  wire signed [31:0] add_signext_71; // sfix32_En15
  wire signed [32:0] add_temp_8; // sfix33_En15
  reg  signed [31:0] sumpipe2_9; // sfix32_En15
  wire signed [31:0] sum2_10; // sfix32_En15
  wire signed [31:0] add_signext_72; // sfix32_En15
  wire signed [31:0] add_signext_73; // sfix32_En15
  wire signed [32:0] add_temp_9; // sfix33_En15
  reg  signed [31:0] sumpipe2_10; // sfix32_En15
  wire signed [31:0] sum2_11; // sfix32_En15
  wire signed [31:0] add_signext_74; // sfix32_En15
  wire signed [31:0] add_signext_75; // sfix32_En15
  wire signed [32:0] add_temp_10; // sfix33_En15
  reg  signed [31:0] sumpipe2_11; // sfix32_En15
  wire signed [31:0] sum2_12; // sfix32_En15
  wire signed [31:0] add_signext_76; // sfix32_En15
  wire signed [31:0] add_signext_77; // sfix32_En15
  wire signed [32:0] add_temp_11; // sfix33_En15
  reg  signed [31:0] sumpipe2_12; // sfix32_En15
  wire signed [31:0] sum2_13; // sfix32_En15
  wire signed [31:0] add_signext_78; // sfix32_En15
  wire signed [31:0] add_signext_79; // sfix32_En15
  wire signed [32:0] add_temp_12; // sfix33_En15
  reg  signed [31:0] sumpipe2_13; // sfix32_En15
  wire signed [31:0] sum2_14; // sfix32_En15
  wire signed [31:0] add_signext_80; // sfix32_En15
  wire signed [31:0] add_signext_81; // sfix32_En15
  wire signed [32:0] add_temp_13; // sfix33_En15
  reg  signed [31:0] sumpipe2_14; // sfix32_En15
  wire signed [31:0] sum3_1; // sfix32_En15
  wire signed [31:0] add_signext_82; // sfix32_En15
  wire signed [31:0] add_signext_83; // sfix32_En15
  wire signed [32:0] add_temp_14; // sfix33_En15
  reg  signed [31:0] sumpipe3_1; // sfix32_En15
  wire signed [31:0] sum3_2; // sfix32_En15
  wire signed [31:0] add_signext_84; // sfix32_En15
  wire signed [31:0] add_signext_85; // sfix32_En15
  wire signed [32:0] add_temp_15; // sfix33_En15
  reg  signed [31:0] sumpipe3_2; // sfix32_En15
  wire signed [31:0] sum3_3; // sfix32_En15
  wire signed [31:0] add_signext_86; // sfix32_En15
  wire signed [31:0] add_signext_87; // sfix32_En15
  wire signed [32:0] add_temp_16; // sfix33_En15
  reg  signed [31:0] sumpipe3_3; // sfix32_En15
  wire signed [31:0] sum3_4; // sfix32_En15
  wire signed [31:0] add_signext_88; // sfix32_En15
  wire signed [31:0] add_signext_89; // sfix32_En15
  wire signed [32:0] add_temp_17; // sfix33_En15
  reg  signed [31:0] sumpipe3_4; // sfix32_En15
  wire signed [31:0] sum3_5; // sfix32_En15
  wire signed [31:0] add_signext_90; // sfix32_En15
  wire signed [31:0] add_signext_91; // sfix32_En15
  wire signed [32:0] add_temp_18; // sfix33_En15
  reg  signed [31:0] sumpipe3_5; // sfix32_En15
  wire signed [31:0] sum3_6; // sfix32_En15
  wire signed [31:0] add_signext_92; // sfix32_En15
  wire signed [31:0] add_signext_93; // sfix32_En15
  wire signed [32:0] add_temp_19; // sfix33_En15
  reg  signed [31:0] sumpipe3_6; // sfix32_En15
  wire signed [31:0] sum3_7; // sfix32_En15
  wire signed [31:0] add_signext_94; // sfix32_En15
  wire signed [31:0] add_signext_95; // sfix32_En15
  wire signed [32:0] add_temp_20; // sfix33_En15
  reg  signed [31:0] sumpipe3_7; // sfix32_En15
  wire signed [31:0] sum4_1; // sfix32_En15
  wire signed [31:0] add_signext_96; // sfix32_En15
  wire signed [31:0] add_signext_97; // sfix32_En15
  wire signed [32:0] add_temp_21; // sfix33_En15
  reg  signed [31:0] sumpipe4_1; // sfix32_En15
  wire signed [31:0] sum4_2; // sfix32_En15
  wire signed [31:0] add_signext_98; // sfix32_En15
  wire signed [31:0] add_signext_99; // sfix32_En15
  wire signed [32:0] add_temp_22; // sfix33_En15
  reg  signed [31:0] sumpipe4_2; // sfix32_En15
  wire signed [31:0] sum4_3; // sfix32_En15
  wire signed [31:0] add_signext_100; // sfix32_En15
  wire signed [31:0] add_signext_101; // sfix32_En15
  wire signed [32:0] add_temp_23; // sfix33_En15
  reg  signed [31:0] sumpipe4_3; // sfix32_En15
  reg  signed [31:0] sumpipe4_4; // sfix32_En15
  wire signed [31:0] sum5_1; // sfix32_En15
  wire signed [31:0] add_signext_102; // sfix32_En15
  wire signed [31:0] add_signext_103; // sfix32_En15
  wire signed [32:0] add_temp_24; // sfix33_En15
  reg  signed [31:0] sumpipe5_1; // sfix32_En15
  wire signed [31:0] sum5_2; // sfix32_En15
  wire signed [31:0] add_signext_104; // sfix32_En15
  wire signed [31:0] add_signext_105; // sfix32_En15
  wire signed [32:0] add_temp_25; // sfix33_En15
  reg  signed [31:0] sumpipe5_2; // sfix32_En15
  wire signed [31:0] sum6_1; // sfix32_En15
  wire signed [31:0] add_signext_106; // sfix32_En15
  wire signed [31:0] add_signext_107; // sfix32_En15
  wire signed [32:0] add_temp_26; // sfix33_En15
  reg  signed [31:0] sumpipe6_1; // sfix32_En15
  wire signed [15:0] output_typeconvert; // sfix16
  reg  signed [15:0] output_register; // sfix16

  // Block Statements
  always @( posedge clk or negedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b0) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
        delay_pipeline[19] <= 0;
        delay_pipeline[20] <= 0;
        delay_pipeline[21] <= 0;
        delay_pipeline[22] <= 0;
        delay_pipeline[23] <= 0;
        delay_pipeline[24] <= 0;
        delay_pipeline[25] <= 0;
        delay_pipeline[26] <= 0;
        delay_pipeline[27] <= 0;
        delay_pipeline[28] <= 0;
        delay_pipeline[29] <= 0;
        delay_pipeline[30] <= 0;
        delay_pipeline[31] <= 0;
        delay_pipeline[32] <= 0;
        delay_pipeline[33] <= 0;
        delay_pipeline[34] <= 0;
        delay_pipeline[35] <= 0;
        delay_pipeline[36] <= 0;
        delay_pipeline[37] <= 0;
        delay_pipeline[38] <= 0;
        delay_pipeline[39] <= 0;
        delay_pipeline[40] <= 0;
        delay_pipeline[41] <= 0;
        delay_pipeline[42] <= 0;
        delay_pipeline[43] <= 0;
        delay_pipeline[44] <= 0;
        delay_pipeline[45] <= 0;
        delay_pipeline[46] <= 0;
        delay_pipeline[47] <= 0;
        delay_pipeline[48] <= 0;
        delay_pipeline[49] <= 0;
        delay_pipeline[50] <= 0;
        delay_pipeline[51] <= 0;
        delay_pipeline[52] <= 0;
        delay_pipeline[53] <= 0;
        delay_pipeline[54] <= 0;
        delay_pipeline[55] <= 0;
        delay_pipeline[56] <= 0;
        delay_pipeline[57] <= 0;
        delay_pipeline[58] <= 0;
        delay_pipeline[59] <= 0;
        delay_pipeline[60] <= 0;
        delay_pipeline[61] <= 0;
        delay_pipeline[62] <= 0;
        delay_pipeline[63] <= 0;
        delay_pipeline[64] <= 0;
        delay_pipeline[65] <= 0;
        delay_pipeline[66] <= 0;
        delay_pipeline[67] <= 0;
        delay_pipeline[68] <= 0;
        delay_pipeline[69] <= 0;
        delay_pipeline[70] <= 0;
        delay_pipeline[71] <= 0;
        delay_pipeline[72] <= 0;
        delay_pipeline[73] <= 0;
        delay_pipeline[74] <= 0;
        delay_pipeline[75] <= 0;
        delay_pipeline[76] <= 0;
        delay_pipeline[77] <= 0;
        delay_pipeline[78] <= 0;
        delay_pipeline[79] <= 0;
        delay_pipeline[80] <= 0;
        delay_pipeline[81] <= 0;
        delay_pipeline[82] <= 0;
        delay_pipeline[83] <= 0;
        delay_pipeline[84] <= 0;
        delay_pipeline[85] <= 0;
        delay_pipeline[86] <= 0;
        delay_pipeline[87] <= 0;
        delay_pipeline[88] <= 0;
        delay_pipeline[89] <= 0;
        delay_pipeline[90] <= 0;
        delay_pipeline[91] <= 0;
        delay_pipeline[92] <= 0;
        delay_pipeline[93] <= 0;
        delay_pipeline[94] <= 0;
        delay_pipeline[95] <= 0;
        delay_pipeline[96] <= 0;
        delay_pipeline[97] <= 0;
        delay_pipeline[98] <= 0;
        delay_pipeline[99] <= 0;
        delay_pipeline[100] <= 0;
        delay_pipeline[101] <= 0;
        delay_pipeline[102] <= 0;
        delay_pipeline[103] <= 0;
        delay_pipeline[104] <= 0;
        delay_pipeline[105] <= 0;
        delay_pipeline[106] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
          delay_pipeline[19] <= delay_pipeline[18];
          delay_pipeline[20] <= delay_pipeline[19];
          delay_pipeline[21] <= delay_pipeline[20];
          delay_pipeline[22] <= delay_pipeline[21];
          delay_pipeline[23] <= delay_pipeline[22];
          delay_pipeline[24] <= delay_pipeline[23];
          delay_pipeline[25] <= delay_pipeline[24];
          delay_pipeline[26] <= delay_pipeline[25];
          delay_pipeline[27] <= delay_pipeline[26];
          delay_pipeline[28] <= delay_pipeline[27];
          delay_pipeline[29] <= delay_pipeline[28];
          delay_pipeline[30] <= delay_pipeline[29];
          delay_pipeline[31] <= delay_pipeline[30];
          delay_pipeline[32] <= delay_pipeline[31];
          delay_pipeline[33] <= delay_pipeline[32];
          delay_pipeline[34] <= delay_pipeline[33];
          delay_pipeline[35] <= delay_pipeline[34];
          delay_pipeline[36] <= delay_pipeline[35];
          delay_pipeline[37] <= delay_pipeline[36];
          delay_pipeline[38] <= delay_pipeline[37];
          delay_pipeline[39] <= delay_pipeline[38];
          delay_pipeline[40] <= delay_pipeline[39];
          delay_pipeline[41] <= delay_pipeline[40];
          delay_pipeline[42] <= delay_pipeline[41];
          delay_pipeline[43] <= delay_pipeline[42];
          delay_pipeline[44] <= delay_pipeline[43];
          delay_pipeline[45] <= delay_pipeline[44];
          delay_pipeline[46] <= delay_pipeline[45];
          delay_pipeline[47] <= delay_pipeline[46];
          delay_pipeline[48] <= delay_pipeline[47];
          delay_pipeline[49] <= delay_pipeline[48];
          delay_pipeline[50] <= delay_pipeline[49];
          delay_pipeline[51] <= delay_pipeline[50];
          delay_pipeline[52] <= delay_pipeline[51];
          delay_pipeline[53] <= delay_pipeline[52];
          delay_pipeline[54] <= delay_pipeline[53];
          delay_pipeline[55] <= delay_pipeline[54];
          delay_pipeline[56] <= delay_pipeline[55];
          delay_pipeline[57] <= delay_pipeline[56];
          delay_pipeline[58] <= delay_pipeline[57];
          delay_pipeline[59] <= delay_pipeline[58];
          delay_pipeline[60] <= delay_pipeline[59];
          delay_pipeline[61] <= delay_pipeline[60];
          delay_pipeline[62] <= delay_pipeline[61];
          delay_pipeline[63] <= delay_pipeline[62];
          delay_pipeline[64] <= delay_pipeline[63];
          delay_pipeline[65] <= delay_pipeline[64];
          delay_pipeline[66] <= delay_pipeline[65];
          delay_pipeline[67] <= delay_pipeline[66];
          delay_pipeline[68] <= delay_pipeline[67];
          delay_pipeline[69] <= delay_pipeline[68];
          delay_pipeline[70] <= delay_pipeline[69];
          delay_pipeline[71] <= delay_pipeline[70];
          delay_pipeline[72] <= delay_pipeline[71];
          delay_pipeline[73] <= delay_pipeline[72];
          delay_pipeline[74] <= delay_pipeline[73];
          delay_pipeline[75] <= delay_pipeline[74];
          delay_pipeline[76] <= delay_pipeline[75];
          delay_pipeline[77] <= delay_pipeline[76];
          delay_pipeline[78] <= delay_pipeline[77];
          delay_pipeline[79] <= delay_pipeline[78];
          delay_pipeline[80] <= delay_pipeline[79];
          delay_pipeline[81] <= delay_pipeline[80];
          delay_pipeline[82] <= delay_pipeline[81];
          delay_pipeline[83] <= delay_pipeline[82];
          delay_pipeline[84] <= delay_pipeline[83];
          delay_pipeline[85] <= delay_pipeline[84];
          delay_pipeline[86] <= delay_pipeline[85];
          delay_pipeline[87] <= delay_pipeline[86];
          delay_pipeline[88] <= delay_pipeline[87];
          delay_pipeline[89] <= delay_pipeline[88];
          delay_pipeline[90] <= delay_pipeline[89];
          delay_pipeline[91] <= delay_pipeline[90];
          delay_pipeline[92] <= delay_pipeline[91];
          delay_pipeline[93] <= delay_pipeline[92];
          delay_pipeline[94] <= delay_pipeline[93];
          delay_pipeline[95] <= delay_pipeline[94];
          delay_pipeline[96] <= delay_pipeline[95];
          delay_pipeline[97] <= delay_pipeline[96];
          delay_pipeline[98] <= delay_pipeline[97];
          delay_pipeline[99] <= delay_pipeline[98];
          delay_pipeline[100] <= delay_pipeline[99];
          delay_pipeline[101] <= delay_pipeline[100];
          delay_pipeline[102] <= delay_pipeline[101];
          delay_pipeline[103] <= delay_pipeline[102];
          delay_pipeline[104] <= delay_pipeline[103];
          delay_pipeline[105] <= delay_pipeline[104];
          delay_pipeline[106] <= delay_pipeline[105];
        end
      end
    end // Delay_Pipeline_process


  assign product107 = $signed({delay_pipeline[106][15:0], 1'b0});

  assign mul_temp = delay_pipeline[104] * coeff105;
  assign product105 = mul_temp[30:0];

  assign mul_temp_1 = delay_pipeline[102] * coeff103;
  assign product103 = mul_temp_1[30:0];

  assign mulpwr2_temp = (delay_pipeline[100]==16'b1000000000000000) ? $signed({1'b0, delay_pipeline[100]}) : -delay_pipeline[100];

  assign product101 = $signed({mulpwr2_temp[16:0], 3'b000});

  assign mul_temp_2 = delay_pipeline[98] * coeff99;
  assign product99 = mul_temp_2[30:0];

  assign mul_temp_3 = delay_pipeline[96] * coeff97;
  assign product97 = mul_temp_3[30:0];

  assign mul_temp_4 = delay_pipeline[94] * coeff95;
  assign product95 = mul_temp_4[30:0];

  assign mul_temp_5 = delay_pipeline[92] * coeff93;
  assign product93 = mul_temp_5[30:0];

  assign mul_temp_6 = delay_pipeline[90] * coeff91;
  assign product91 = mul_temp_6[30:0];

  assign mul_temp_7 = delay_pipeline[88] * coeff89;
  assign product89 = mul_temp_7[30:0];

  assign mul_temp_8 = delay_pipeline[86] * coeff87;
  assign product87 = mul_temp_8[30:0];

  assign mul_temp_9 = delay_pipeline[84] * coeff85;
  assign product85 = mul_temp_9[30:0];

  assign mul_temp_10 = delay_pipeline[82] * coeff83;
  assign product83 = mul_temp_10[30:0];

  assign mul_temp_11 = delay_pipeline[80] * coeff81;
  assign product81 = mul_temp_11[30:0];

  assign mul_temp_12 = delay_pipeline[78] * coeff79;
  assign product79 = mul_temp_12[30:0];

  assign mul_temp_13 = delay_pipeline[76] * coeff77;
  assign product77 = mul_temp_13[30:0];

  assign mul_temp_14 = delay_pipeline[74] * coeff75;
  assign product75 = mul_temp_14[30:0];

  assign mul_temp_15 = delay_pipeline[72] * coeff73;
  assign product73 = mul_temp_15[30:0];

  assign mul_temp_16 = delay_pipeline[70] * coeff71;
  assign product71 = mul_temp_16[30:0];

  assign mul_temp_17 = delay_pipeline[68] * coeff69;
  assign product69 = mul_temp_17[30:0];

  assign mul_temp_18 = delay_pipeline[66] * coeff67;
  assign product67 = mul_temp_18[30:0];

  assign mul_temp_19 = delay_pipeline[64] * coeff65;
  assign product65 = mul_temp_19[30:0];

  assign mul_temp_20 = delay_pipeline[62] * coeff63;
  assign product63 = mul_temp_20[30:0];

  assign mul_temp_21 = delay_pipeline[60] * coeff61;
  assign product61 = mul_temp_21[30:0];

  assign mul_temp_22 = delay_pipeline[58] * coeff59;
  assign product59 = mul_temp_22[30:0];

  assign mul_temp_23 = delay_pipeline[56] * coeff57;
  assign product57 = mul_temp_23[30:0];

  assign mul_temp_24 = delay_pipeline[54] * coeff55;
  assign product55 = mul_temp_24[30:0];

  assign product54 = $signed({delay_pipeline[53][15:0], 14'b00000000000000});

  assign mul_temp_25 = delay_pipeline[52] * coeff53;
  assign product53 = mul_temp_25[30:0];

  assign mul_temp_26 = delay_pipeline[50] * coeff51;
  assign product51 = mul_temp_26[30:0];

  assign mul_temp_27 = delay_pipeline[48] * coeff49;
  assign product49 = mul_temp_27[30:0];

  assign mul_temp_28 = delay_pipeline[46] * coeff47;
  assign product47 = mul_temp_28[30:0];

  assign mul_temp_29 = delay_pipeline[44] * coeff45;
  assign product45 = mul_temp_29[30:0];

  assign mul_temp_30 = delay_pipeline[42] * coeff43;
  assign product43 = mul_temp_30[30:0];

  assign mul_temp_31 = delay_pipeline[40] * coeff41;
  assign product41 = mul_temp_31[30:0];

  assign mul_temp_32 = delay_pipeline[38] * coeff39;
  assign product39 = mul_temp_32[30:0];

  assign mul_temp_33 = delay_pipeline[36] * coeff37;
  assign product37 = mul_temp_33[30:0];

  assign mul_temp_34 = delay_pipeline[34] * coeff35;
  assign product35 = mul_temp_34[30:0];

  assign mul_temp_35 = delay_pipeline[32] * coeff33;
  assign product33 = mul_temp_35[30:0];

  assign mul_temp_36 = delay_pipeline[30] * coeff31;
  assign product31 = mul_temp_36[30:0];

  assign mul_temp_37 = delay_pipeline[28] * coeff29;
  assign product29 = mul_temp_37[30:0];

  assign mul_temp_38 = delay_pipeline[26] * coeff27;
  assign product27 = mul_temp_38[30:0];

  assign mul_temp_39 = delay_pipeline[24] * coeff25;
  assign product25 = mul_temp_39[30:0];

  assign mul_temp_40 = delay_pipeline[22] * coeff23;
  assign product23 = mul_temp_40[30:0];

  assign mul_temp_41 = delay_pipeline[20] * coeff21;
  assign product21 = mul_temp_41[30:0];

  assign mul_temp_42 = delay_pipeline[18] * coeff19;
  assign product19 = mul_temp_42[30:0];

  assign mul_temp_43 = delay_pipeline[16] * coeff17;
  assign product17 = mul_temp_43[30:0];

  assign mul_temp_44 = delay_pipeline[14] * coeff15;
  assign product15 = mul_temp_44[30:0];

  assign mul_temp_45 = delay_pipeline[12] * coeff13;
  assign product13 = mul_temp_45[30:0];

  assign mul_temp_46 = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp_46[30:0];

  assign mul_temp_47 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_47[30:0];

  assign mulpwr2_temp_1 = (delay_pipeline[6]==16'b1000000000000000) ? $signed({1'b0, delay_pipeline[6]}) : -delay_pipeline[6];

  assign product7 = $signed({mulpwr2_temp_1[16:0], 3'b000});

  assign mul_temp_48 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_48[30:0];

  assign mul_temp_49 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_49[30:0];

  assign product1 = $signed({delay_pipeline[0][15:0], 1'b0});

  assign add_signext = product107;
  assign add_signext_1 = product105;
  assign sum1_1 = add_signext + add_signext_1;

  assign add_signext_2 = product103;
  assign add_signext_3 = product101;
  assign sum1_2 = add_signext_2 + add_signext_3;

  assign add_signext_4 = product99;
  assign add_signext_5 = product97;
  assign sum1_3 = add_signext_4 + add_signext_5;

  assign add_signext_6 = product95;
  assign add_signext_7 = product93;
  assign sum1_4 = add_signext_6 + add_signext_7;

  assign add_signext_8 = product91;
  assign add_signext_9 = product89;
  assign sum1_5 = add_signext_8 + add_signext_9;

  assign add_signext_10 = product87;
  assign add_signext_11 = product85;
  assign sum1_6 = add_signext_10 + add_signext_11;

  assign add_signext_12 = product83;
  assign add_signext_13 = product81;
  assign sum1_7 = add_signext_12 + add_signext_13;

  assign add_signext_14 = product79;
  assign add_signext_15 = product77;
  assign sum1_8 = add_signext_14 + add_signext_15;

  assign add_signext_16 = product75;
  assign add_signext_17 = product73;
  assign sum1_9 = add_signext_16 + add_signext_17;

  assign add_signext_18 = product71;
  assign add_signext_19 = product69;
  assign sum1_10 = add_signext_18 + add_signext_19;

  assign add_signext_20 = product67;
  assign add_signext_21 = product65;
  assign sum1_11 = add_signext_20 + add_signext_21;

  assign add_signext_22 = product63;
  assign add_signext_23 = product61;
  assign sum1_12 = add_signext_22 + add_signext_23;

  assign add_signext_24 = product59;
  assign add_signext_25 = product57;
  assign sum1_13 = add_signext_24 + add_signext_25;

  assign add_signext_26 = product55;
  assign add_signext_27 = product54;
  assign sum1_14 = add_signext_26 + add_signext_27;

  assign add_signext_28 = product53;
  assign add_signext_29 = product51;
  assign sum1_15 = add_signext_28 + add_signext_29;

  assign add_signext_30 = product49;
  assign add_signext_31 = product47;
  assign sum1_16 = add_signext_30 + add_signext_31;

  assign add_signext_32 = product45;
  assign add_signext_33 = product43;
  assign sum1_17 = add_signext_32 + add_signext_33;

  assign add_signext_34 = product41;
  assign add_signext_35 = product39;
  assign sum1_18 = add_signext_34 + add_signext_35;

  assign add_signext_36 = product37;
  assign add_signext_37 = product35;
  assign sum1_19 = add_signext_36 + add_signext_37;

  assign add_signext_38 = product33;
  assign add_signext_39 = product31;
  assign sum1_20 = add_signext_38 + add_signext_39;

  assign add_signext_40 = product29;
  assign add_signext_41 = product27;
  assign sum1_21 = add_signext_40 + add_signext_41;

  assign add_signext_42 = product25;
  assign add_signext_43 = product23;
  assign sum1_22 = add_signext_42 + add_signext_43;

  assign add_signext_44 = product21;
  assign add_signext_45 = product19;
  assign sum1_23 = add_signext_44 + add_signext_45;

  assign add_signext_46 = product17;
  assign add_signext_47 = product15;
  assign sum1_24 = add_signext_46 + add_signext_47;

  assign add_signext_48 = product13;
  assign add_signext_49 = product11;
  assign sum1_25 = add_signext_48 + add_signext_49;

  assign add_signext_50 = product9;
  assign add_signext_51 = product7;
  assign sum1_26 = add_signext_50 + add_signext_51;

  assign add_signext_52 = product5;
  assign add_signext_53 = product3;
  assign sum1_27 = add_signext_52 + add_signext_53;

  always @ (posedge clk or negedge reset)
    begin: temp_process1
      if (reset == 1'b0) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
        sumpipe1_7 <= 0;
        sumpipe1_8 <= 0;
        sumpipe1_9 <= 0;
        sumpipe1_10 <= 0;
        sumpipe1_11 <= 0;
        sumpipe1_12 <= 0;
        sumpipe1_13 <= 0;
        sumpipe1_14 <= 0;
        sumpipe1_15 <= 0;
        sumpipe1_16 <= 0;
        sumpipe1_17 <= 0;
        sumpipe1_18 <= 0;
        sumpipe1_19 <= 0;
        sumpipe1_20 <= 0;
        sumpipe1_21 <= 0;
        sumpipe1_22 <= 0;
        sumpipe1_23 <= 0;
        sumpipe1_24 <= 0;
        sumpipe1_25 <= 0;
        sumpipe1_26 <= 0;
        sumpipe1_27 <= 0;
        sumpipe1_28 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= sum1_6;
          sumpipe1_7 <= sum1_7;
          sumpipe1_8 <= sum1_8;
          sumpipe1_9 <= sum1_9;
          sumpipe1_10 <= sum1_10;
          sumpipe1_11 <= sum1_11;
          sumpipe1_12 <= sum1_12;
          sumpipe1_13 <= sum1_13;
          sumpipe1_14 <= sum1_14;
          sumpipe1_15 <= sum1_15;
          sumpipe1_16 <= sum1_16;
          sumpipe1_17 <= sum1_17;
          sumpipe1_18 <= sum1_18;
          sumpipe1_19 <= sum1_19;
          sumpipe1_20 <= sum1_20;
          sumpipe1_21 <= sum1_21;
          sumpipe1_22 <= sum1_22;
          sumpipe1_23 <= sum1_23;
          sumpipe1_24 <= sum1_24;
          sumpipe1_25 <= sum1_25;
          sumpipe1_26 <= sum1_26;
          sumpipe1_27 <= sum1_27;
          sumpipe1_28 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_54 = sumpipe1_1;
  assign add_signext_55 = sumpipe1_2;
  assign add_temp = add_signext_54 + add_signext_55;
  assign sum2_1 = add_temp[31:0];

  assign add_signext_56 = sumpipe1_3;
  assign add_signext_57 = sumpipe1_4;
  assign add_temp_1 = add_signext_56 + add_signext_57;
  assign sum2_2 = add_temp_1[31:0];

  assign add_signext_58 = sumpipe1_5;
  assign add_signext_59 = sumpipe1_6;
  assign add_temp_2 = add_signext_58 + add_signext_59;
  assign sum2_3 = add_temp_2[31:0];

  assign add_signext_60 = sumpipe1_7;
  assign add_signext_61 = sumpipe1_8;
  assign add_temp_3 = add_signext_60 + add_signext_61;
  assign sum2_4 = add_temp_3[31:0];

  assign add_signext_62 = sumpipe1_9;
  assign add_signext_63 = sumpipe1_10;
  assign add_temp_4 = add_signext_62 + add_signext_63;
  assign sum2_5 = add_temp_4[31:0];

  assign add_signext_64 = sumpipe1_11;
  assign add_signext_65 = sumpipe1_12;
  assign add_temp_5 = add_signext_64 + add_signext_65;
  assign sum2_6 = add_temp_5[31:0];

  assign add_signext_66 = sumpipe1_13;
  assign add_signext_67 = sumpipe1_14;
  assign add_temp_6 = add_signext_66 + add_signext_67;
  assign sum2_7 = add_temp_6[31:0];

  assign add_signext_68 = sumpipe1_15;
  assign add_signext_69 = sumpipe1_16;
  assign add_temp_7 = add_signext_68 + add_signext_69;
  assign sum2_8 = add_temp_7[31:0];

  assign add_signext_70 = sumpipe1_17;
  assign add_signext_71 = sumpipe1_18;
  assign add_temp_8 = add_signext_70 + add_signext_71;
  assign sum2_9 = add_temp_8[31:0];

  assign add_signext_72 = sumpipe1_19;
  assign add_signext_73 = sumpipe1_20;
  assign add_temp_9 = add_signext_72 + add_signext_73;
  assign sum2_10 = add_temp_9[31:0];

  assign add_signext_74 = sumpipe1_21;
  assign add_signext_75 = sumpipe1_22;
  assign add_temp_10 = add_signext_74 + add_signext_75;
  assign sum2_11 = add_temp_10[31:0];

  assign add_signext_76 = sumpipe1_23;
  assign add_signext_77 = sumpipe1_24;
  assign add_temp_11 = add_signext_76 + add_signext_77;
  assign sum2_12 = add_temp_11[31:0];

  assign add_signext_78 = sumpipe1_25;
  assign add_signext_79 = sumpipe1_26;
  assign add_temp_12 = add_signext_78 + add_signext_79;
  assign sum2_13 = add_temp_12[31:0];

  assign add_signext_80 = sumpipe1_27;
  assign add_signext_81 = $signed({{1{sumpipe1_28[30]}}, sumpipe1_28});
  assign add_temp_13 = add_signext_80 + add_signext_81;
  assign sum2_14 = add_temp_13[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process2
      if (reset == 1'b0) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
        sumpipe2_4 <= 0;
        sumpipe2_5 <= 0;
        sumpipe2_6 <= 0;
        sumpipe2_7 <= 0;
        sumpipe2_8 <= 0;
        sumpipe2_9 <= 0;
        sumpipe2_10 <= 0;
        sumpipe2_11 <= 0;
        sumpipe2_12 <= 0;
        sumpipe2_13 <= 0;
        sumpipe2_14 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
          sumpipe2_4 <= sum2_4;
          sumpipe2_5 <= sum2_5;
          sumpipe2_6 <= sum2_6;
          sumpipe2_7 <= sum2_7;
          sumpipe2_8 <= sum2_8;
          sumpipe2_9 <= sum2_9;
          sumpipe2_10 <= sum2_10;
          sumpipe2_11 <= sum2_11;
          sumpipe2_12 <= sum2_12;
          sumpipe2_13 <= sum2_13;
          sumpipe2_14 <= sum2_14;
        end
      end
    end // temp_process2

  assign add_signext_82 = sumpipe2_1;
  assign add_signext_83 = sumpipe2_2;
  assign add_temp_14 = add_signext_82 + add_signext_83;
  assign sum3_1 = add_temp_14[31:0];

  assign add_signext_84 = sumpipe2_3;
  assign add_signext_85 = sumpipe2_4;
  assign add_temp_15 = add_signext_84 + add_signext_85;
  assign sum3_2 = add_temp_15[31:0];

  assign add_signext_86 = sumpipe2_5;
  assign add_signext_87 = sumpipe2_6;
  assign add_temp_16 = add_signext_86 + add_signext_87;
  assign sum3_3 = add_temp_16[31:0];

  assign add_signext_88 = sumpipe2_7;
  assign add_signext_89 = sumpipe2_8;
  assign add_temp_17 = add_signext_88 + add_signext_89;
  assign sum3_4 = add_temp_17[31:0];

  assign add_signext_90 = sumpipe2_9;
  assign add_signext_91 = sumpipe2_10;
  assign add_temp_18 = add_signext_90 + add_signext_91;
  assign sum3_5 = add_temp_18[31:0];

  assign add_signext_92 = sumpipe2_11;
  assign add_signext_93 = sumpipe2_12;
  assign add_temp_19 = add_signext_92 + add_signext_93;
  assign sum3_6 = add_temp_19[31:0];

  assign add_signext_94 = sumpipe2_13;
  assign add_signext_95 = sumpipe2_14;
  assign add_temp_20 = add_signext_94 + add_signext_95;
  assign sum3_7 = add_temp_20[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process3
      if (reset == 1'b0) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
        sumpipe3_3 <= 0;
        sumpipe3_4 <= 0;
        sumpipe3_5 <= 0;
        sumpipe3_6 <= 0;
        sumpipe3_7 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sum3_2;
          sumpipe3_3 <= sum3_3;
          sumpipe3_4 <= sum3_4;
          sumpipe3_5 <= sum3_5;
          sumpipe3_6 <= sum3_6;
          sumpipe3_7 <= sum3_7;
        end
      end
    end // temp_process3

  assign add_signext_96 = sumpipe3_1;
  assign add_signext_97 = sumpipe3_2;
  assign add_temp_21 = add_signext_96 + add_signext_97;
  assign sum4_1 = add_temp_21[31:0];

  assign add_signext_98 = sumpipe3_3;
  assign add_signext_99 = sumpipe3_4;
  assign add_temp_22 = add_signext_98 + add_signext_99;
  assign sum4_2 = add_temp_22[31:0];

  assign add_signext_100 = sumpipe3_5;
  assign add_signext_101 = sumpipe3_6;
  assign add_temp_23 = add_signext_100 + add_signext_101;
  assign sum4_3 = add_temp_23[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process4
      if (reset == 1'b0) begin
        sumpipe4_1 <= 0;
        sumpipe4_2 <= 0;
        sumpipe4_3 <= 0;
        sumpipe4_4 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
          sumpipe4_2 <= sum4_2;
          sumpipe4_3 <= sum4_3;
          sumpipe4_4 <= sumpipe3_7;
        end
      end
    end // temp_process4

  assign add_signext_102 = sumpipe4_1;
  assign add_signext_103 = sumpipe4_2;
  assign add_temp_24 = add_signext_102 + add_signext_103;
  assign sum5_1 = add_temp_24[31:0];

  assign add_signext_104 = sumpipe4_3;
  assign add_signext_105 = sumpipe4_4;
  assign add_temp_25 = add_signext_104 + add_signext_105;
  assign sum5_2 = add_temp_25[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process5
      if (reset == 1'b0) begin
        sumpipe5_1 <= 0;
        sumpipe5_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe5_1 <= sum5_1;
          sumpipe5_2 <= sum5_2;
        end
      end
    end // temp_process5

  assign add_signext_106 = sumpipe5_1;
  assign add_signext_107 = sumpipe5_2;
  assign add_temp_26 = add_signext_106 + add_signext_107;
  assign sum6_1 = add_temp_26[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process6
      if (reset == 1'b0) begin
        sumpipe6_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe6_1 <= sum6_1;
        end
      end
    end // temp_process6

  assign sum_final = sumpipe6_1<<<1;

  assign output_typeconvert = (sum_final[30:0] + {sum_final[15], {14{~sum_final[15]}}})>>>15;

  always @ (posedge clk or negedge reset)
    begin: Output_Register_process
      if (reset == 1'b0) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // filter
