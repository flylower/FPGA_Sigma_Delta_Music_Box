// -------------------------------------------------------------
//
// Module: hbf2
// Generated by MATLAB(R) 8.6 and the Filter Design HDL Coder 2.10.
// Generated on: 2017-03-08 16:45:23
// -------------------------------------------------------------

// -------------------------------------------------------------
// HDL Code Generation Options:
//
// FIRAdderStyle: tree
// OptimizeForHDL: on
// AddPipelineRegisters: on
// Name: hbf2
// ResetAssertedLevel: Active-low
// TargetLanguage: Verilog
// MultifileTestBench: on
// TestBenchStimulus: impulse step ramp chirp noise 
// InitializeTestBenchInputs: on

// -------------------------------------------------------------
// HDL Implementation    : Fully parallel
// Multipliers           : 11
// Folding Factor        : 1
// -------------------------------------------------------------
// Filter Settings:
//
// Discrete-Time FIR Filter (real)
// -------------------------------
// Filter Structure  : Direct-Form FIR
// Filter Length     : 19
// Stable            : Yes
// Linear Phase      : Yes (Type 1)
// Arithmetic        : fixed
// Numerator         : s16,15 -> [-1 1)
// Input             : s16,0 -> [-32768 32768)
// Filter Internals  : Specify Precision
//   Output          : s16,0 -> [-32768 32768)
//   Product         : s31,15 -> [-32768 32768)
//   Accumulator     : s32,15 -> [-65536 65536)
//   Round Mode      : convergent
//   Overflow Mode   : wrap
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module hbf2
               (
                clk,
                clk_enable,
                reset,
                filter_in,
                filter_out
                );

  input   clk; 
  input   clk_enable; 
  input   reset; 
  input   signed [15:0] filter_in; //sfix16
  output  signed [15:0] filter_out; //sfix16

////////////////////////////////////////////////////////////////
//Module Architecture: hbf2
////////////////////////////////////////////////////////////////
  // Local Functions
  // Type Definitions
  // Constants
  parameter signed [15:0] coeff1 = 16'b0000000000011100; //sfix16_En15
  parameter signed [15:0] coeff2 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff3 = 16'b1111111100110111; //sfix16_En15
  parameter signed [15:0] coeff4 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff5 = 16'b0000001100011111; //sfix16_En15
  parameter signed [15:0] coeff6 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff7 = 16'b1111011001000101; //sfix16_En15
  parameter signed [15:0] coeff8 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff9 = 16'b0010011101001001; //sfix16_En15
  parameter signed [15:0] coeff10 = 16'b0100000000000000; //sfix16_En15
  parameter signed [15:0] coeff11 = 16'b0010011101001001; //sfix16_En15
  parameter signed [15:0] coeff12 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff13 = 16'b1111011001000101; //sfix16_En15
  parameter signed [15:0] coeff14 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff15 = 16'b0000001100011111; //sfix16_En15
  parameter signed [15:0] coeff16 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff17 = 16'b1111111100110111; //sfix16_En15
  parameter signed [15:0] coeff18 = 16'b0000000000000000; //sfix16_En15
  parameter signed [15:0] coeff19 = 16'b0000000000011100; //sfix16_En15

  // Signals
  reg  signed [15:0] delay_pipeline [0:18] ; // sfix16
  wire signed [30:0] product19; // sfix31_En15
  wire signed [31:0] mul_temp; // sfix32_En15
  wire signed [30:0] product17; // sfix31_En15
  wire signed [31:0] mul_temp_1; // sfix32_En15
  wire signed [30:0] product15; // sfix31_En15
  wire signed [31:0] mul_temp_2; // sfix32_En15
  wire signed [30:0] product13; // sfix31_En15
  wire signed [31:0] mul_temp_3; // sfix32_En15
  wire signed [30:0] product11; // sfix31_En15
  wire signed [31:0] mul_temp_4; // sfix32_En15
  wire signed [30:0] product10; // sfix31_En15
  wire signed [30:0] product9; // sfix31_En15
  wire signed [31:0] mul_temp_5; // sfix32_En15
  wire signed [30:0] product7; // sfix31_En15
  wire signed [31:0] mul_temp_6; // sfix32_En15
  wire signed [30:0] product5; // sfix31_En15
  wire signed [31:0] mul_temp_7; // sfix32_En15
  wire signed [30:0] product3; // sfix31_En15
  wire signed [31:0] mul_temp_8; // sfix32_En15
  wire signed [30:0] product1; // sfix31_En15
  wire signed [31:0] mul_temp_9; // sfix32_En15
  wire signed [31:0] sum_final; // sfix32_En15
  wire signed [31:0] sum1_1; // sfix32_En15
  wire signed [30:0] add_signext; // sfix31_En15
  wire signed [30:0] add_signext_1; // sfix31_En15
  reg  signed [31:0] sumpipe1_1; // sfix32_En15
  wire signed [31:0] sum1_2; // sfix32_En15
  wire signed [30:0] add_signext_2; // sfix31_En15
  wire signed [30:0] add_signext_3; // sfix31_En15
  reg  signed [31:0] sumpipe1_2; // sfix32_En15
  wire signed [31:0] sum1_3; // sfix32_En15
  wire signed [30:0] add_signext_4; // sfix31_En15
  wire signed [30:0] add_signext_5; // sfix31_En15
  reg  signed [31:0] sumpipe1_3; // sfix32_En15
  wire signed [31:0] sum1_4; // sfix32_En15
  wire signed [30:0] add_signext_6; // sfix31_En15
  wire signed [30:0] add_signext_7; // sfix31_En15
  reg  signed [31:0] sumpipe1_4; // sfix32_En15
  wire signed [31:0] sum1_5; // sfix32_En15
  wire signed [30:0] add_signext_8; // sfix31_En15
  wire signed [30:0] add_signext_9; // sfix31_En15
  reg  signed [31:0] sumpipe1_5; // sfix32_En15
  reg  signed [30:0] sumpipe1_6; // sfix31_En15
  wire signed [31:0] sum2_1; // sfix32_En15
  wire signed [31:0] add_signext_10; // sfix32_En15
  wire signed [31:0] add_signext_11; // sfix32_En15
  wire signed [32:0] add_temp; // sfix33_En15
  reg  signed [31:0] sumpipe2_1; // sfix32_En15
  wire signed [31:0] sum2_2; // sfix32_En15
  wire signed [31:0] add_signext_12; // sfix32_En15
  wire signed [31:0] add_signext_13; // sfix32_En15
  wire signed [32:0] add_temp_1; // sfix33_En15
  reg  signed [31:0] sumpipe2_2; // sfix32_En15
  wire signed [31:0] sum2_3; // sfix32_En15
  wire signed [31:0] add_signext_14; // sfix32_En15
  wire signed [31:0] add_signext_15; // sfix32_En15
  wire signed [32:0] add_temp_2; // sfix33_En15
  reg  signed [31:0] sumpipe2_3; // sfix32_En15
  wire signed [31:0] sum3_1; // sfix32_En15
  wire signed [31:0] add_signext_16; // sfix32_En15
  wire signed [31:0] add_signext_17; // sfix32_En15
  wire signed [32:0] add_temp_3; // sfix33_En15
  reg  signed [31:0] sumpipe3_1; // sfix32_En15
  reg  signed [31:0] sumpipe3_2; // sfix32_En15
  wire signed [31:0] sum4_1; // sfix32_En15
  wire signed [31:0] add_signext_18; // sfix32_En15
  wire signed [31:0] add_signext_19; // sfix32_En15
  wire signed [32:0] add_temp_4; // sfix33_En15
  reg  signed [31:0] sumpipe4_1; // sfix32_En15
  wire signed [15:0] output_typeconvert; // sfix16
  reg  signed [15:0] output_register; // sfix16

  // Block Statements
  always @( posedge clk or negedge reset)
    begin: Delay_Pipeline_process
      if (reset == 1'b0) begin
        delay_pipeline[0] <= 0;
        delay_pipeline[1] <= 0;
        delay_pipeline[2] <= 0;
        delay_pipeline[3] <= 0;
        delay_pipeline[4] <= 0;
        delay_pipeline[5] <= 0;
        delay_pipeline[6] <= 0;
        delay_pipeline[7] <= 0;
        delay_pipeline[8] <= 0;
        delay_pipeline[9] <= 0;
        delay_pipeline[10] <= 0;
        delay_pipeline[11] <= 0;
        delay_pipeline[12] <= 0;
        delay_pipeline[13] <= 0;
        delay_pipeline[14] <= 0;
        delay_pipeline[15] <= 0;
        delay_pipeline[16] <= 0;
        delay_pipeline[17] <= 0;
        delay_pipeline[18] <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          delay_pipeline[0] <= filter_in;
          delay_pipeline[1] <= delay_pipeline[0];
          delay_pipeline[2] <= delay_pipeline[1];
          delay_pipeline[3] <= delay_pipeline[2];
          delay_pipeline[4] <= delay_pipeline[3];
          delay_pipeline[5] <= delay_pipeline[4];
          delay_pipeline[6] <= delay_pipeline[5];
          delay_pipeline[7] <= delay_pipeline[6];
          delay_pipeline[8] <= delay_pipeline[7];
          delay_pipeline[9] <= delay_pipeline[8];
          delay_pipeline[10] <= delay_pipeline[9];
          delay_pipeline[11] <= delay_pipeline[10];
          delay_pipeline[12] <= delay_pipeline[11];
          delay_pipeline[13] <= delay_pipeline[12];
          delay_pipeline[14] <= delay_pipeline[13];
          delay_pipeline[15] <= delay_pipeline[14];
          delay_pipeline[16] <= delay_pipeline[15];
          delay_pipeline[17] <= delay_pipeline[16];
          delay_pipeline[18] <= delay_pipeline[17];
        end
      end
    end // Delay_Pipeline_process


  assign mul_temp = delay_pipeline[18] * coeff19;
  assign product19 = mul_temp[30:0];

  assign mul_temp_1 = delay_pipeline[16] * coeff17;
  assign product17 = mul_temp_1[30:0];

  assign mul_temp_2 = delay_pipeline[14] * coeff15;
  assign product15 = mul_temp_2[30:0];

  assign mul_temp_3 = delay_pipeline[12] * coeff13;
  assign product13 = mul_temp_3[30:0];

  assign mul_temp_4 = delay_pipeline[10] * coeff11;
  assign product11 = mul_temp_4[30:0];

  assign product10 = $signed({delay_pipeline[9][15:0], 14'b00000000000000});

  assign mul_temp_5 = delay_pipeline[8] * coeff9;
  assign product9 = mul_temp_5[30:0];

  assign mul_temp_6 = delay_pipeline[6] * coeff7;
  assign product7 = mul_temp_6[30:0];

  assign mul_temp_7 = delay_pipeline[4] * coeff5;
  assign product5 = mul_temp_7[30:0];

  assign mul_temp_8 = delay_pipeline[2] * coeff3;
  assign product3 = mul_temp_8[30:0];

  assign mul_temp_9 = delay_pipeline[0] * coeff1;
  assign product1 = mul_temp_9[30:0];

  assign add_signext = product19;
  assign add_signext_1 = product17;
  assign sum1_1 = add_signext + add_signext_1;

  assign add_signext_2 = product15;
  assign add_signext_3 = product13;
  assign sum1_2 = add_signext_2 + add_signext_3;

  assign add_signext_4 = product11;
  assign add_signext_5 = product10;
  assign sum1_3 = add_signext_4 + add_signext_5;

  assign add_signext_6 = product9;
  assign add_signext_7 = product7;
  assign sum1_4 = add_signext_6 + add_signext_7;

  assign add_signext_8 = product5;
  assign add_signext_9 = product3;
  assign sum1_5 = add_signext_8 + add_signext_9;

  always @ (posedge clk or negedge reset)
    begin: temp_process1
      if (reset == 1'b0) begin
        sumpipe1_1 <= 0;
        sumpipe1_2 <= 0;
        sumpipe1_3 <= 0;
        sumpipe1_4 <= 0;
        sumpipe1_5 <= 0;
        sumpipe1_6 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe1_1 <= sum1_1;
          sumpipe1_2 <= sum1_2;
          sumpipe1_3 <= sum1_3;
          sumpipe1_4 <= sum1_4;
          sumpipe1_5 <= sum1_5;
          sumpipe1_6 <= product1;
        end
      end
    end // temp_process1

  assign add_signext_10 = sumpipe1_1;
  assign add_signext_11 = sumpipe1_2;
  assign add_temp = add_signext_10 + add_signext_11;
  assign sum2_1 = add_temp[31:0];

  assign add_signext_12 = sumpipe1_3;
  assign add_signext_13 = sumpipe1_4;
  assign add_temp_1 = add_signext_12 + add_signext_13;
  assign sum2_2 = add_temp_1[31:0];

  assign add_signext_14 = sumpipe1_5;
  assign add_signext_15 = $signed({{1{sumpipe1_6[30]}}, sumpipe1_6});
  assign add_temp_2 = add_signext_14 + add_signext_15;
  assign sum2_3 = add_temp_2[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process2
      if (reset == 1'b0) begin
        sumpipe2_1 <= 0;
        sumpipe2_2 <= 0;
        sumpipe2_3 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe2_1 <= sum2_1;
          sumpipe2_2 <= sum2_2;
          sumpipe2_3 <= sum2_3;
        end
      end
    end // temp_process2

  assign add_signext_16 = sumpipe2_1;
  assign add_signext_17 = sumpipe2_2;
  assign add_temp_3 = add_signext_16 + add_signext_17;
  assign sum3_1 = add_temp_3[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process3
      if (reset == 1'b0) begin
        sumpipe3_1 <= 0;
        sumpipe3_2 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe3_1 <= sum3_1;
          sumpipe3_2 <= sumpipe2_3;
        end
      end
    end // temp_process3

  assign add_signext_18 = sumpipe3_1;
  assign add_signext_19 = sumpipe3_2;
  assign add_temp_4 = add_signext_18 + add_signext_19;
  assign sum4_1 = add_temp_4[31:0];

  always @ (posedge clk or negedge reset)
    begin: temp_process4
      if (reset == 1'b0) begin
        sumpipe4_1 <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          sumpipe4_1 <= sum4_1;
        end
      end
    end // temp_process4

  assign sum_final = sumpipe4_1<<<1;

  assign output_typeconvert = ((sum_final[30:0] + {sum_final[15], {14{~sum_final[15]}}}))>>>15;

  always @ (posedge clk or negedge reset)
    begin: Output_Register_process
      if (reset == 1'b0) begin
        output_register <= 0;
      end
      else begin
        if (clk_enable == 1'b1) begin
          output_register <= output_typeconvert;
        end
      end
    end // Output_Register_process

  // Assignment Statements
  assign filter_out = output_register;
endmodule  // hbf2
